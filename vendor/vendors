#!/usr/bin/env php
<?php

/**
 * This file is part of the Kdyby (http://www.kdyby.org)
 *
 * Copyright (c) 2008, 2011 Filip Procházka (filip.prochazka@kdyby.org)
 *
 * @license http://www.kdyby.org/license
 */

namespace Kdyby;



/**
 * @author Filip Procházka <filip.prochazka@kdyby.org>
 */
class Vendors
{

	/** @var string */
	private $scriptName;

	/** @var string */
	private $command;

	/** @var array */
	private $deps;

	/** @var array */
	private $versions = array();

	/** @var array */
	private $newVersions = array();



	/**
	 * @param array $argv
	 */
	public function __construct(array $argv)
	{
		$this->scriptName = array_shift($argv);
		$this->command = array_shift($argv) ?: FALSE;
	}



	/**
	 * @param array $argv
	 */
	public static function handle($argv = NULL)
	{
		set_time_limit(0);
		$vendors = new static($argv ? : $_SERVER['argv']);
		$vendors->run();
	}



	/**
	 * Performs the command
	 */
	public function run()
	{
		$this->command || $this->msg("Kdyby vendors script management.",
			"Specify a command to run:",
			" install:   install vendors as specified in .deps or .deps.lock (recommended)",
			" update:    update vendors to their latest versions (as specified in deps)");

		$this->commandKnown() || $this->msg("Command " . $this->command . " does not exist.");

		$this->reinstallOnly() && $this->msg("Your project seems to be based on a distribution, that includes vendors. Try to run \$ " . $this->scriptName . " reinstall");

		$this->readVersions($line) || $this->msg("The .deps.lock version file is not valid (near " . $line . ")");

		$this->readDeps() || $this->msg("The deps file is not valid ini syntax. Perhaps missing a trailing newline?");

		$this->depsHaveSources($name) || $this->msg('The "git" value for the "' . $name . '" dependency must be set.');

		foreach ($this->deps as $name => $dep) {
			$this->fetchVersion($name, $this->depDir($name));
		}

		$this->isUpdate() && $this->freezeVersions();

		$this->console('kdyby:clear-cache');
	}



	/**
	 * Tells whether command is known
	 * @return bool
	 */
	private function commandKnown()
	{
		return in_array($this->command, array('install', 'update', 'reinstall'));
	}



	/**
	 * Tells if the only command is reinstall
	 * @return bool
	 */
	private function reinstallOnly()
	{
		$fw = __DIR__ . '/framework';
		return is_dir($fw) && !is_dir($fw . '/.git') && $this->command !== 'reinstall';
	}



	/**
	 * Reads versions from .deps.lock file, if required
	 * @param string &$line
	 * @return bool
	 */
	private function readVersions(&$line)
	{
		if ($this->isUpdate() || !file_exists(__DIR__ . '/.deps.lock')) {
			return TRUE;
		}

		foreach (file(__DIR__ . '/.deps.lock', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES) as $line) {
			if (count($parts = array_values(array_filter(explode(' ', $line)))) !== 2) {
				return FALSE;
			}
			$this->versions[$parts[0]] = $parts[1];
		}
		return TRUE;
	}



	/**
	 * Reads all vendors from .deps file
	 * @return bool
	 */
	private function readDeps()
	{
		if (FALSE !== $this->deps = @parse_ini_file(__DIR__ . '/.deps', TRUE, INI_SCANNER_RAW)) {
			foreach ($this->deps as $name => $dep) {
				$this->deps[$name] = array_map('trim', $dep);
			}
			return TRUE;
		}
		return FALSE;
	}



	/**
	 * Validates if all vendors in .deps file have git source
	 * @param $name
	 * @return bool
	 */
	private function depsHaveSources(&$name)
	{
		foreach ($this->deps as $name => $dep) {
			if (!isset($dep['git'])) {
				return FALSE;
			}
		}
		return TRUE;
	}



	/**
	 * Returns dependency directory. If dir is missing, clones vendor from git source.
	 * @param string $name
	 * @return string
	 */
	private function depDir($name)
	{
		$dep = $this->deps[$name];
		$dir = isset($dep['target']) ? __DIR__ . '/' . $dep['target'] : __DIR__ . '/' . $name;
		$this->command === 'reinstall' && $this->remove($name, $dir);
		is_dir($dir) || $this->install($name, $dir);
		return $dir;
	}



	/**
	 * Clones vendor from git source to specified directory.
	 * @param string $name
	 * @param string $dir
	 */
	private function install($name, $dir)
	{
		echo "\$ install $name\n";
		system('git clone ' . escapeshellarg($this->deps[$name]['git']) . ' ' . escapeshellarg($dir));
	}



	/**
	 * Removes the directory
	 * @param string $name
	 * @param string $dir
	 */
	private function remove($name, $dir)
	{
		if (is_link($dir)) {
			echo "\$ I'm afraid of symlinks! Skipping $dir\n";
			return;
		}

		echo "\$ remove $name\n";
		if (PHP_OS == 'WINNT') {
			system('rmdir /S /Q ' . escapeshellarg(realpath($dir)));
		} else {
			system('rm -rf ' . escapeshellarg($dir));
		}
	}



	/**
	 * Fetches exactly the required version of vendor, or the last one if version is missing.
	 * @param string $name
	 * @param string $dir
	 */
	private function fetchVersion($name, $dir)
	{
		if (is_link($dir)) {
			echo "\$ I'm pretty sure you would be mad if I'd hard reset symlink to $name, would you?\n";
			return;
		}

		$rev = $this->depRevision($name);

		echo "\$ update $name\n";
		system('cd ' . escapeshellarg($dir) . ' && git fetch origin && git reset --hard ' . escapeshellarg($rev));

		$this->isUpdate() && $this->readVersion($name, $dir);
	}



	/**
	 * Returns version that vendor is locket in to or origin/HEAD
	 * @param string $name
	 * @return string
	 */
	private function depRevision($name)
	{
		if (isset($this->versions[$name])) {
			return $this->versions[$name];
		}

		return isset($this->deps[$name]['version']) ? $this->deps[$name]['version'] : 'origin/HEAD';
	}



	/**
	 * Tells if the command is update
	 * @return bool
	 */
	private function isUpdate()
	{
		return $this->command === 'update';
	}



	/**
	 * Reads current version of vendor
	 * @param string $name
	 * @param string $dir
	 */
	private function readVersion($name, $dir)
	{
		ob_start();
		system('cd ' . escapeshellarg($dir) . ' && git log -n 1 --format=%H');
		$this->newVersions[] = trim($name . ' ' . ob_get_clean());
	}



	/**
	 * Saves vendors current versions to .deps.lock file
	 */
	private function freezeVersions()
	{
		file_put_contents(__DIR__ . '/.deps.lock', implode("\n", $this->newVersions));
	}



	/**
	 * Run application console command
	 * @param string $command
	 * @return string
	 */
	private function console($command)
	{
		$console = realpath(dirname(dirname($this->scriptName)) . '/app/console');
		system(escapeshellarg($console) . ' ' . $command);
	}



	/**
	 * Formats and prints the given arguments as message. Exits afterwards.
	 */
	private function msg()
	{
		echo implode("\n", func_get_args()), "\n\n\n";
		exit;
	}

}

Vendors::handle();
